import Foundation

class Employe {
    var matricule: String
    var nom: String
    var prenom: String
    var dateNaissance: Date
    var dateEmbauche: Date
    var salaire: Double
    
    init(matricule: String, nom: String, prenom: String, dateNaissance: Date, dateEmbauche: Date, salaire: Double) {
        self.matricule = matricule
        self.nom = nom.uppercased()
        self.prenom = prenom.prefix(1).uppercased() + prenom.lowercased().dropFirst()
        self.dateNaissance = dateNaissance
        self.dateEmbauche = dateEmbauche
        self.salaire = salaire
    }
    
    func age() -> Int {
        let calendar = Calendar.current
        let components = calendar.dateComponents([.year], from: dateNaissance, to: Date())
        return components.year ?? 0
    }
    
    func anciennete() -> Int {
        let calendar = Calendar.current
        let components = calendar.dateComponents([.year], from: dateEmbauche, to: Date())
        return components.year ?? 0
    }
    
    func augmenterSalaire() {
        let anciennete = self.anciennete()
        
        if anciennete < 5 {
            salaire *= 1.02
        } else if anciennete < 10 {
            salaire *= 1.05
        } else {
            salaire *= 1.1
        }
    }
    
    func afficher() {
        let ancienSalaire = salaire / (1 + (Double(anciennete()) / 100))
        augmenterSalaire()
        print("Matricule: \(matricule)")
        print("Nom complet: \(nom) \(prenom)")
        print("Age: \(age())")
        print("Ancienneté: \(anciennete()) ans")
        print("Ancien salaire: \(ancienSalaire)")
        print("Nouveau Salaire: \(salaire)")
    }
}

class GestionEmployes {
    var employes: [Employe] = []
    
    func ajouterEmploye() {
        print("Entrez le matricule de l'employé :")
        let matricule = readLine() ?? ""
        }
        
        print("Entrez le nom de l'employé :")
        let nom = readLine() ?? ""
        
        print("Entrez le prénom de l'employé :")
        let prenom = readLine() ?? ""
        
        print("Entrez la date de naissance de l'employé (format: jj/mm/aaaa) :")
        let dateNaissanceString = readLine() ?? ""
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd/MM/yyyy"
        let dateNaissance = dateFormatter.date(from: dateNaissanceString) ?? Date()
        
        print("Entrez la date d'embauche de l'employé (format: jj/mm/aaaa) :")
        let dateEmbaucheString = readLine() ?? ""
        let dateEmbauche = dateFormatter.date(from: dateEmbaucheString) ?? Date()
        
        print("Entrez le salaire de l'employé :")
        let salaireString = readLine() ?? ""
        let salaire = Double(salaireString) ?? 0.0
        
        let employe = Employe(matricule: matricule, nom: nom, prenom: prenom, dateNaissance: dateNaissance, dateEmbauche: dateEmbauche, salaire: salaire)
        employes.append(employe)
        
        print("L'employé a été ajouté avec succès.")
    }
    
    func rechercherEmploye() {
        print("Entrez le matricule de l'employé à rechercher :")
        let matricule = readLine() ?? ""
        
        if let employe = employes.first(where: { $0.matricule == matricule }) {
            employe.afficher()
        } else {
            print("Aucun employé avec le matricule \(matricule) n'a été trouvé.")
        }
    }
    
    func afficherEmployes() {
        if employes.isEmpty {
            print("Aucun employé à afficher.")
        } else {
            print("--- Liste des employés ---")
            for employe in employes {
                print("----------------------------")
                employe.afficher()
            }
            print("----------------------------")
        }
    }
    
    func gererEmployes() {
        var quitter = false
        
        repeat {
            print("""
                Menu :
                1. Ajouter un employé.
                2. Rechercher un employé par matricule.
                3. Afficher tous les employés.
                4. Quitter.
                """)
            
            print("Entrez votre choix :")
            let choix = readLine() ?? ""
            
            switch choix {
            case "1":
                ajouterEmploye()
            case "2":
                rechercherEmploye()
            case "3":
                afficherEmployes()
            case "4":
                quitter = true
            default:
                print("Choix invalide.")
            }
            
            print("\n")
        } while !quitter
    }
}

let gestionEmployes = GestionEmployes()
gestionEmployes.gererEmployes()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Execution :
swift /tmp/wzBMSZLu4I.swift
Menu :
1. Ajouter un employé.
2. Rechercher un employé par matricule.
3. Afficher tous les employés.
4. Quitter.
Entrez votre choix :
